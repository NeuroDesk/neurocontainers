name: build-apps

on:
  workflow_call:
    inputs:
      applications:
        required: true
        type: string
      runner:
        required: true
        type: string

env:
  GH_REGISTRY: ${{ secrets.GH_REGISTRY }}
  DOCKERHUB_ORG: ${{ secrets.DOCKERHUB_ORG }}
  OS_PASSWORD: ${{ secrets.SWIFT_OS_PASSWORD }}
  OS_PROJECT_ID: ${{ secrets.SWIFT_OS_PROJECT_ID }}
  OS_USERNAME: ${{ secrets.SWIFT_OS_USERNAME }}
  OS_APPLICATION_CREDENTIAL_ID: ${{ secrets.SWIFT_OS_APPLICATION_CREDENTIAL_ID }}
  OS_APPLICATION_CREDENTIAL_SECRET: ${{ secrets.SWIFT_OS_APPLICATION_CREDENTIAL_SECRET }}
  ORACLE_USER: ${{ secrets.ORACLE_USER }}
  ORACLE_NEURODESK_BUCKET: ${{ secrets.ORACLE_NEURODESK_BUCKET }}

jobs:
  build:
    if: ${{ inputs.applications != '[]' }}
    runs-on: ${{ fromJSON(inputs.runner) }}
    strategy:
      fail-fast: false
      matrix:
        application: ${{ fromJSON(inputs.applications) }}
    permissions:
      packages: write
    outputs:
      BUILDDATE: ${{ steps.ENVVARS.outputs.BUILDDATE }}
      IMAGENAME: ${{ steps.IMAGEVARS.outputs.IMAGENAME }}
    steps:
      - uses: actions/checkout@v3
      - name: Set environment variables
        id: ENVVARS
        run: |
          APPLICATION=${{ matrix.application }}
          SHORT_SHA=$(git rev-parse --short $GITHUB_SHA)
          BUILDDATE=`date +%Y%m%d`
          echo "APPLICATION=$APPLICATION" >> $GITHUB_ENV
          echo "SHORT_SHA=$SHORT_SHA" >> $GITHUB_ENV
          echo "BUILDDATE=$BUILDDATE" >> $GITHUB_ENV
      - name: Fetch build config overrides
        if: "contains('self-hosted', 'ubuntu')"
        run: |
          FREEUPSPACE=$(cat .github/workflows/build-config.json | jq ".${APPLICATION} .freeUpSpace")
          [ "$FREEUPSPACE" == "null" ] && FREEUPSPACE=$(cat .github/workflows/build-config.json | jq ".default .freeUpSpace")
          echo "FREEUPSPACE=${FREEUPSPACE}"
          echo "FREEUPSPACE=${FREEUPSPACE}" >> $GITHUB_ENV
      - name: Free up space (optional)
        if: env.FREEUPSPACE == 'true'
        uses: easimon/maximize-build-space@master
        with:
          root-reserve-mb: 40000
          swap-size-mb: 1024
          remove-dotnet: 'true'
          remove-android: 'true'
          remove-haskell: 'true'
          overprovision-lvm: 'true'
      - name: Move docker installation (optional)
        if: env.FREEUPSPACE == 'true'
        run: |
          sudo mv /var/lib/docker /home/runner/work/docker
          sudo ln -s /home/runner/work/docker /var/lib/docker
          sudo systemctl restart docker
      - name : Build recipes
        run: |
          echo "APPLICATION: $APPLICATION"
          cd recipes/$APPLICATION
          echo `which python`
          /bin/bash build.sh
      - name: Set image variables
        id: IMAGEVARS
        run: |
          DOCKERFILE=`basename $(find ./recipes/$APPLICATION/ -type f -iname "*.Dockerfile" | head -1)`
          IMAGENAME=$(echo $(basename $DOCKERFILE .Dockerfile) | tr '[A-Z]' '[a-z]')
          echo "IMAGENAME: $IMAGENAME"
          echo "IMAGENAME_TEST=${IMAGENAME//_/ }" >> $GITHUB_ENV
          echo "test command: bash /neurocommand/local/fetch_and_run.sh ${IMAGENAME//_/ } $BUILDDATE"
          echo "IMAGENAME=$IMAGENAME" >> $GITHUB_ENV
      - name: Log into Github Package registry
        if: "${{ env.GH_REGISTRY != '' }}"
        run: echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u $GITHUB_ACTOR --password-stdin
      - name: Log into Dockerhub (optional)
        if: "${{ env.DOCKERHUB_ORG != '' }}"
        run: echo "${{ secrets.DOCKERHUB_PASSWORD }}" | docker login -u "${{ secrets.DOCKERHUB_USERNAME }}" --password-stdin
      - name : Run docker builder + Upload to docker and github registry
        run: /bin/bash .github/workflows/build-docker.sh $IMAGENAME
      - name: Check image for wasted space using dive
        uses: MartinHeinz/dive-action@v0.1.0
        if: ${{ !contains(github.event.head_commit.message, 'skipdive') && github.ref == 'refs/heads/master'}}
        with:
          image: vnmd/${{ env.IMAGENAME }}:${{ env.BUILDDATE }}
          # github-token: ${{ secrets.GITHUB_TOKEN }}
          config: ${{ github.workspace }}/.github/.dive-ci.yml
      - name: Generate job output
        run: |
          echo "The container has been successfully build. To test the container, run this:" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY # this is a blank line
          echo "bash /neurocommand/local/fetch_and_run.sh ${IMAGENAME//_/ } $BUILDDATE" >> $GITHUB_STEP_SUMMARY
      - name: Generate issue for new container to test and merge
        uses: JasonEtco/create-an-issue@v2
        env: 
          GITHUB_TOKEN: ${{ secrets.NEURODESK_GITHUB_TOKEN_ISSUE_AUTOMATION }}
        with:
          filename: .github/new_container_issue_template.md
