name: template

on:
  workflow_dispatch:
    inputs:
      application:
        description: 'Application'
        required: true
        type: string
      freeupspace:
        description: 'Free up space?'
        required: true
        type: boolean
  push:
    paths:
      - recipes/**
      - .github/workflows/template.yml
    branches:
      - master

env:
  GH_REGISTRY: ${{ secrets.GH_REGISTRY }}
  DOCKERHUB_ORG: ${{ secrets.DOCKERHUB_ORG }}
  OS_PASSWORD: ${{ secrets.SWIFT_OS_PASSWORD }}
  OS_PROJECT_ID: ${{ secrets.SWIFT_OS_PROJECT_ID }}
  OS_USERNAME: ${{ secrets.SWIFT_OS_USERNAME }}
  OS_APPLICATION_CREDENTIAL_ID: ${{ secrets.SWIFT_OS_APPLICATION_CREDENTIAL_ID }}
  OS_APPLICATION_CREDENTIAL_SECRET: ${{ secrets.SWIFT_OS_APPLICATION_CREDENTIAL_SECRET }}

jobs:
  setup-matrix:
    runs-on: ubuntu-latest
    outputs:
      changed_recipes: ${{ steps.find_changed_recipes.outputs.changed_recipes }}
    steps:
    - uses: actions/checkout@v3
      with:
        fetch-depth: 0
    - name: Find changed directories
      id: find_changed_dirs
      uses: tj-actions/changed-files@v34
      with:
        files: "recipes/**"
        dir_names: "true"
        json: "true"
    - name: Find changed recipes
      id: find_changed_recipes
      if: steps.find_changed_dirs.outputs.any_changed == 'true'
      run: |
        changed_recipes=$(echo "${{ steps.find_changed_dirs.outputs.all_changed_files }}" | jq -rc '.[]'  | cut -d/ -f 2-2 | jq -ncR '[inputs]' | jq 'unique' | jq -rc '.[]')
        echo "${changed_recipes}"
        echo "changed_recipes=${changed_recipes}" >> $GITHUB_OUTPUT

  # matrix-job:
  #   runs-on: ubuntu-latest
  #   needs: setup-matrix
  #   strategy:
  #     matrix:
  #       applications: ${{needs.setup-matrix.outputs.changed_recipes}}
  #   steps:
  #     - run: echo "matrix.applications"


      # strategy:
      #   matrix:
      #     include:
      #       - application: ${{ github.event.inputs.application }}


  # build-docker:
  #   strategy:
  #     matrix: ${{fromJson(needs.matrix_prep.outputs.matrix)}}
  #   runs-on: ubuntu-latest
  #   permissions:
  #     packages: write
  #   outputs:
  #     BUILDDATE: ${{ steps.ENVVARS.outputs.BUILDDATE }}
  #     IMAGELIST: ${{ steps.IMAGEVARS.outputs.IMAGELIST }}
  #   steps:
  #     - uses: actions/checkout@v3
  #     - name: Set environment variables
  #       id: ENVVARS
  #       run: |
  #         APPLICATION=${{ matrix.application }}
  #         SHORT_SHA=$(git rev-parse --short $GITHUB_SHA)
  #         BUILDDATE=`date +%Y%m%d`
  #         echo "APPLICATION=$APPLICATION" >> $GITHUB_ENV
  #         echo "SHORT_SHA=$SHORT_SHA" >> $GITHUB_ENV
  #         echo "BUILDDATE=$BUILDDATE" >> $GITHUB_ENV





      # - name: Check free-up-space list
      #   run: |
      #     FREEUPSPACELIST=$(cat .github/workflows/free-up-space-list.txt)
      #     if [[ $FREEUPSPACELIST == *"|$APPLICATION|"* ]]; then
      #       rm -rf $GITHUB_WORKSPACE/*
      #       FREEUPSPACE=true
      #     fi
      #     echo "FREEUPSPACE=$FREEUPSPACE" >> $GITHUB_ENV
      # - name: Free up space (optional)
      #   if: env.FREEUPSPACE
      #   uses: easimon/maximize-build-space@master
      #   with:
      #     root-reserve-mb: 40000
      #     swap-size-mb: 1024
      #     remove-dotnet: 'true'
      #     remove-android: 'true'
      #     remove-haskell: 'true'
      #     overprovision-lvm: 'true'
      # - name: Move docker installation (optional)
      #   if: env.FREEUPSPACE
      #   run: |
      #     sudo mv /var/lib/docker /home/runner/work/docker
      #     sudo ln -s /home/runner/work/docker /var/lib/docker
      #     sudo systemctl restart docker
      # - uses: actions/checkout@v3
      # - uses: actions/setup-python@v4
      #   with:
      #     python-version: 3.8
      # - name : Build recipes
      #   run: |
      #     echo "APPLICATION: $APPLICATION"
      #     cd recipes/$APPLICATION
      #     /bin/bash build.sh

      # - name: Set image variables
      #   id: IMAGEVARS
      #   run: |
      #     IMAGELIST=()
      #     for DOCKERFILE in recipes/$APPLICATION/*.Dockerfile; do
      #       IMAGENAME=$(echo $(basename $DOCKERFILE .Dockerfile) | tr '[A-Z]' '[a-z]')
      #       echo "IMAGENAME: $IMAGENAME"
      #       echo "test command: bash /neurocommand/local/fetch_and_run.sh ${IMAGENAME//_/ } $BUILDDATE"
      #       IMAGELIST+=$IMAGENAME
      #     done
      #     echo "IMAGELIST=$IMAGELIST" >> $GITHUB_ENV
      # - name: Log into Github Package registry
      #   if: env.GH_REGISTRY != ''
      #   run: echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u $GITHUB_ACTOR --password-stdin
      # - name: Log into Dockerhub (optional)
      #   if: env.DOCKERHUB_ORG != ''
      #   run: echo "${{ secrets.DOCKERHUB_PASSWORD }}" | docker login -u ${{ secrets.DOCKERHUB_USERNAME }} --password-stdin
      # - name : Run docker builder + Upload to docker and github registry
      #   run: for IMAGENAME in "${IMAGELIST[@]}"; do /bin/bash .github/workflows/build-docker.sh $IMAGENAME; done
      # - name: Generate job output
      #   run: |
      #     echo "The container has been successfully build. To test the container, run this:" >> $GITHUB_STEP_SUMMARY
      #     echo "" >> $GITHUB_STEP_SUMMARY # this is a blank line
      #     for IMAGENAME in "${IMAGELIST[@]}"; do echo "bash /neurocommand/local/fetch_and_run.sh ${IMAGENAME//_/ } $BUILDDATE" >> $GITHUB_STEP_SUMMARY; done